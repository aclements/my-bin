#!/usr/bin/python

# This daemon watches for when your IP address changes and
# automatically handles the following tasks:
# * All ssh connections that are still using an old IP are
#   disconnected (first using SIGTERM, then SIGKILL, which is
#   necessary if they are blocking on the network, such as sftp
#   connections).  Those connected via autossh are reconnected using
#   autossh.
# * If Pidgin is still connected through an old IP, its status is
#   switched to offline and then back to the status it previously had.
#   (Note that this requires purple-remote, which can be found in the
#   libpurple-bin package)

# How frequently, in seconds, to poll for an IP change
POLL_INTERVAL = 2.0

# How long an IP can be down for before it's considered dead
#GRACE_SECS = 20
#GRACE_SECS = 2
GRACE_SECS = 0

# A regular expression that should match the interface names for which
# up/down events should be considered.  This is useful to filter out
# interfaces that don't actually go to the Internet.
INTERFACE_RE = "(eth|wlan)[0-9]+$"
# XXX Perhaps doing something based on routing tables would be better.
# After all, most connections decide which interface to bind to based
# on the destination address.  As a first pass, we could consider only
# the interface that has/had the default gateway, but we might be able
# to do something smarter by classifying each destination IP based on
# the routing table.  So, for example, when an interface comes up, we
# look at what part of the IP space it will route and only restart
# autossh connections to IP's in that space.
# * In this model, do I even care what the host's IP addresses are?
# ** Yes.  At the last I need to map routing interface to source IP so
#    I can tell when the source IP for a destination changes
# * This would also avoid problems with restarting connections before
#   the routes for a newly up interface are installed

# To do:
# * Stop amarok when the interface goes away
# * Ping something before deciding that the interface really is up
#   * Maybe something that some process is connected to?

import sys, os, stat, errno, time, signal
import socket, fcntl
import array, struct
import re

##################################################################
# IP interface utilities
#

SIOCGIFCONF = 0x8912
IFNAMSIZ = 16
if struct.calcsize("P") == 8:
    IFREQSIZ = 40
else:
    IFREQSIZ = 32

def getSystemInfo():
    code = """
#include <sys/ioctl.h>
#include <net/if.h>
#include <stdio.h>
int main(void) {
  printf("SIOCGIFCONF = 0x%x\\n", SIOCGIFCONF);
  printf("IFNAMSIZ = %d\\n", IFNAMSIZ);
  printf("IFREQSIZ = %d\\n", sizeof(struct ifreq));
}
"""
    gcc = os.popen("gcc -o /tmp/ipchanged-info -xc -", "w")
    gcc.write(code)
    if gcc.close() != None:
        raise RuntimeError, "gcc failed"
    os.system("/tmp/ipchanged-info")

def getHostIPs():
    """Retrieve all of the host's IP addresses.  These are returned as a
    dictionary mapping interface names to IP address strings in
    standard Internet form.  This supports IPv4 and IPv6."""

    # This was quite useful as a reference:
    #   http://mail.nl.linux.org/kernelnewbies/2003-05/msg00090.html
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,
                      socket.IPPROTO_IP)
    # Repeatedly ask for the interface configuration, increasing the
    # buffer size until it's larger than the response size
    bytes = 0
    ressize = (IFREQSIZ * 4)/2
    while ressize >= bytes:
        bytes = ressize*2
        res = array.array("B", "\0" * bytes)
        # Pass the size and address of the response buffer
        req = struct.pack("iL", bytes, res.buffer_info()[0])
        resinfo = fcntl.ioctl(s, SIOCGIFCONF, req)
        # Get the actual size of the response
        ressize, _ = struct.unpack("iL", resinfo)
    res = res.tostring()
    # Parse the response
    out = {}
    for offset in range(0, ressize, IFREQSIZ):
        # Each record consists of an IFNAMSIZ null-terminated string
        # followed by a sockaddr structure
        name = res[offset:offset+IFNAMSIZ]
        name = name[:name.find("\0")]
        addr = res[offset+IFNAMSIZ:offset+IFREQSIZ]
        # The sockaddr structure consists of the unsigned short
        # address family, followed by data
        afsize = struct.calcsize("H")
        af, = struct.unpack("H", addr[:afsize])
        if af == socket.AF_INET:
            # The sockaddr_in structure consists of the address
            # family, unsigned short port number, 4 byte in_addr
            # structure, and padding.
            inaddroff = struct.calcsize("HH")
            inaddrsize = 4
        elif af == socket.AF_INET6:
            # The sockaddr_in6 structure consists of the address
            # family, unsigned short port number, unsigned int flow
            # information, 16 byte in6_addr, and unsigned int byte
            # scope ID.
            inaddroff = struct.calcsize("HHI")
            inaddrsize = 16
        else:
            print >> sys.stderr, "%s: Unknown address family %d" % (name, af)
            continue
        ip = socket.inet_ntop(af, addr[inaddroff:inaddroff+inaddrsize])
        out[name] = ip
    return out

##################################################################
# Process information
#

cache = {}

def getInodeToAddrMap():
    """Retrieve a mapping from socket inode numbers to IP addresses.
    The return value is a dictionary mapping inumbers to IP address
    strings in standard Internet form."""

    if getInodeToAddrMap in cache:
        return cache[getInodeToAddrMap]

    out = {}
    for ipv6 in (False, True):
        if not ipv6:
            procname = "tcp"
            bytes = 4
            af = socket.AF_INET
        else:
            procname = "tcp6"
            bytes = 16
            af = socket.AF_INET6

        fp = file("/proc/net/" + procname, "r")
        header = fp.next()
        localAddressIdx = header.find("local_address")
        inodeIdx = header.find("inode")
        for line in fp:
            localAddress = line[localAddressIdx:].split()[0]
            localAddress, _ = localAddress.split(":")
            localAddress = int(localAddress, 16)
            if not ipv6:
                # For added fun, IPv4 addresses are in host order
                # because they're just dumps of the bytes of and int.
                # For example, D300A8C0.  However, IPv6 addresses are
                # given in network order.  For example,
                # 0000000000000000FFFF0000D300A8C0.
                try:
                    localAddress = socket.htonl(localAddress)
                except OverflowError:
                    # This used to happen because I had swapped the
                    # test of IPv6 above
                    print "OverflowError converting", `localAddress`, "from line", `line`
                    raise
            # Convert to a packed string, preserving byte order
            laStr = []
            for byte in range(bytes-1,-1,-1):
                laStr.append((localAddress>>(byte*8))&0xFF)
            laStr = "".join(map(chr, laStr))
            # Format the address
            localAddress = socket.inet_ntop(af, laStr)
            inode = int(line[inodeIdx:].split()[0])
            out[inode] = localAddress
    cache[getInodeToAddrMap] = out
    return out

def getSockInodesOfPID(pid):
    """Retrieve a set of socket inode numbers open by the given PID.
    Throws LookupError if the process ID does not exist or cannot be
    accessed by the current user."""

    out = set()
    fddir = "/proc/%d/fd" % pid
    try:
        files = os.listdir(fddir)
    except OSError, e:
        if e.errno == errno.ENOENT:
            raise LookupError("No such pid %d" % pid)
        elif e.errno == errno.EACCES:
            raise LookupError("No access to pid %d" % pid)
        raise
    for fd in files:
        try:
            path = fddir + "/" + fd
            # stat may freeze if it tries to follow a symlink to a
            # network mount, so filter out files syntactically
            # first
            if os.readlink(path).startswith("/"):
                continue
            s = os.stat(path)
        except OSError, e:
            if e.errno == errno.ENOENT:
                # This is okay.  The file was just closed
                continue
            raise
        if not stat.S_ISSOCK(s.st_mode):
            continue
        out.add(s.st_ino)
    return out

def getAddrsOfPID(pid):
    """Retrieve a set of IP addresses in use by the given PID.  Throws
    LookupError if the process ID does not exist or cannot be accessed
    by the current user."""

    out = set()
    i2a = getInodeToAddrMap()
    inodes = getSockInodesOfPID(pid)
    for inode in inodes:
        try:
            out.add(i2a[inode])
        except LookupError:
            pass
    return out

##################################################################
# Process utilities
#

def pids():
    """An iterator over all process ID's."""

    for pid in os.listdir("/proc"):
        if not pid.isdigit():
            continue
        yield int(pid)

def getPIDName(pid):
    """Get the process name of the specified process ID.  This is the base
    name of the process's binary.  Throws LookupError if the process
    ID does not exist or cannot be accessed by the current user."""

    f = "/proc/%d/exe" % pid
    try:
        return os.path.basename(os.readlink(f))
    except OSError, e:
        if e.errno == errno.ENOENT:
            raise LookupError("No such pid %d" % pid)
        elif e.errno == errno.EACCES:
            raise LookupError("No access to pid %d" % pid)
        raise

def pidsOf(name):
    """Get the process ID's whose name equals the specified name."""

    out = set()
    for pid in pids():
        try:
            if getPIDName(pid) != name:
                continue
        except LookupError:
            continue
        out.add(pid)
    return out

def getPPIDOf(pid):
    """Get the parent process ID of the specified process ID."""

    f = "/proc/%d/stat" % pid
    try:
        line = file(f, "r").readline()
    except IOError, e:
        if e.errno == errno.ENOENT:
            raise LookupError("No such pid %d" % pid)
        elif e.errno == errno.EACCES:
            raise LookupError("No access to pid %d" % pid)
        raise
    line = line[line.find(")")+1:]
    return int(line.split()[1])

def killNicely(procname, delay, pids):
    for pid in pids:
        print >> sys.stderr, "Terminating %s %d" % (procname, pid)
        try:
            os.kill(pid, signal.SIGTERM)
            pass
        except OSError, e:
            if e.errno == errno.ESRCH:
                continue
            raise

    nChecks = int(delay * 10)
    for check in range(nChecks):
        time.sleep(0.1)
        remaining = []
        for pid in pids:
            try:
                if getPIDName(pid) == procname:
                    remaining.append(pid)
            except LookupError:
                continue
        if not remaining:
            # All processes died
            break
        pids = remaining
        if check == nChecks - 1:
            # Kill remaining ones harder
            for pid in pids:
                print >> sys.stderr, "Killing %s %d" % (procname, pid)
                try:
                    os.kill(pid, signal.SIGKILL)
                    pass
                except OSError, e:
                    if e.errno == errno.ESRCH:
                        continue
                    raise

##################################################################
# Main
#

def main():
    monitor = IPMonitor()
    handlers = [SSHHandler(), AutosshHandler(), PidginHandler()]

    while True:
        down, anyUp, active = monitor.update()

        # Handle changed IP's
        cache.clear()
        if down:
            for h in handlers:
                h.handleDown(down, active)
        if anyUp:
            for h in handlers:
                h.handleUp(active)

        time.sleep(POLL_INTERVAL)

##################################################################
# IP change monitoring
#

class IPMonitor(object):
    def __init__(self):
        _, self.__curIPs = self.__getIPs()
        self.__pending = {}

    def update(self):
        allIPs, nowIPs = self.__getIPs()

        # Which IP's of interest changed?
        newlyDown = self.__curIPs - nowIPs
        newlyUp = nowIPs - self.__curIPs

        for ip in newlyDown:
            print >> sys.stderr, "%s went down" % ip
        for ip in newlyUp:
            print >> sys.stderr, "%s came up" % ip

        self.__curIPs = nowIPs

        # Revive pending IP's that have come back up
        up = set()
        for ip in newlyUp:
            if ip in self.__pending:
                print "%s revived within grace period" % ip
                del self.__pending[ip]
            else:
                up.add(ip)

        now = time.time()

        # Add newly down IP's to pending list
        for ip in newlyDown:
            self.__pending[ip] = now + GRACE_SECS

        # If any IP has come up, expire all pending IP's.  This is
        # necessary for things like switching from wireless to wired.
        if up:
            down = set(self.__pending.keys())
            self.__pending.clear()
            for ip in down:
                print >> sys.stderr, "%s replaced" % ip
        else:
            # Find IP's whose grace period has expired
            down = set()
            for ip, end in self.__pending.iteritems():
                if now >= end:
                    down.add(ip)
            for ip in down:
                del self.__pending[ip]
                print >> sys.stderr, "%s exceeded grace period" % ip

        return (down, bool(up), allIPs.union(self.__pending.keys()))

    def __getIPs(self):
        """Retrieve the host's current IP's, returning a pair of the
        set of all IP's and the set of IP's for which up and down
        events should be considered."""

        ipMap = getHostIPs()
        filteredIPs = set()
        allIPs = set(ipMap.values())
        matcher = re.compile(INTERFACE_RE)
        for iface, ip in ipMap.items():
            if matcher.match(iface):
                filteredIPs.add(ip)
        return allIPs, filteredIPs

##################################################################
# IP change handling
#

class Handler(object):
    def __init__(self):
        pass

    def handleDown(self, newlyDown, active):
        pass

    def handleUp(self, active):
        pass

class SSHHandler(Handler):
    def __init__(self):
        Handler.__init__(self)

    def handleDown(self, newlyDown, active):
        # Kill SSH's that are using a newly down IP
        # XXX What about other things that will automatically
        # reconnect, like sshfs?
        self.__kill(lambda addrs: bool(addrs.intersection(newlyDown)))

    def handleUp(self, active):
        # Kill SSH's that are using a non-active IP
        self.__kill(lambda addrs: bool(addrs - active))

    def __kill(self, pred):
        # Kill SSH's that satisfy pred.  pred is called with the set
        # of IP's in use by each ssh
        toKill = set()
        for pid in pidsOf("ssh"):
            if self.__immune(pid):
                continue

            try:
                addrs = getAddrsOfPID(pid)
            except LookupError:
                continue
            if pred(addrs):
                toKill.add(pid)

        killNicely("ssh", 1, toKill)

    def __immune(self, pid):
        # Don't kill SSH's that are running inside autossh
        try:
            ppid = getPPIDOf(pid)
            if getPIDName(ppid) == "autossh":
                return True
        except LookupError:
            pass
        return False

class AutosshHandler(Handler):
    def __init__(self):
        Handler.__init__(self)
        self.__toRestart = {}

    def handleDown(self, newlyDown, active):
        # Find all autossh's that are using a newly down IP.  Don't
        # signal them yet, because they'll just try to reconnect
        for autossh, ssh in self.__autosshs():
            try:
                addrs = getAddrsOfPID(ssh)
            except LookupError:
                continue
            if addrs.intersection(newlyDown):
                print "Will reconnect autossh %d (ssh %d)" % (autossh, ssh)
                self.__toRestart[autossh] = ssh

    def handleUp(self, active):
        # Add autossh's using non-active IP's to the restart list
        for autossh, ssh in self.__autosshs():
            try:
                addrs = getAddrsOfPID(ssh)
            except LookupError:
                continue
            if addrs - active:
                self.__toRestart[autossh] = ssh
        # Restart autossh's
        for autossh, ssh in self.__toRestart.items():
            print "Reconnecting autossh %d (ssh %d)" % (autossh, ssh)
            try:
                os.kill(autossh, signal.SIGUSR1)
            except OSError:
                continue

    def __autosshs(self):
        for pid in pidsOf("ssh"):
            try:
                ppid = getPPIDOf(pid)
                if getPIDName(ppid) != "autossh":
                    continue
            except LookupError:
                continue
            yield (ppid, pid)

class PidginHandler(Handler):
    def __init__(self):
        Handler.__init__(self)
        self.__onlineStatus = "offline"

    def handleDown(self, newlyDown, active):
        # If Pidgin is using an IP that just went down, disconnect it
        for pid in pidsOf("pidgin"):
            try:
                addrs = getAddrsOfPID(pid)
            except LookupError:
                continue
            if newlyDown.intersection(addrs):
                self.__disconnect()
                break

    def handleUp(self, active):
        # Disconnect Pidgin if it is using a non-active IP
        for pid in pidsOf("pidgin"):
            try:
                addrs = getAddrsOfPID(pid)
            except LookupError:
                continue
            if addrs - active:
                self.__disconnect()
                break
        # Reconnect if we disconnected Pidgin (either just now or when
        # the IP went down)
        if self.__onlineStatus != "offline":
            print "Reconnecting Pidgin (%s)" % `self.__onlineStatus`
            self.__purpleSetStatus(self.__onlineStatus)
            self.__onlineStatus = "offline"

    def __disconnect(self):
        status = self.__purpleGetStatus()
        if not status:
            self.__onlineStatus = "offline"
            return
        print "Disconnecting Pidgin (was %s)" % `status`
        if status != "offline":
            self.__onlineStatus = status
        self.__purpleSetStatus("offline")

    @staticmethod
    def __purpleGetStatus():
        # XXX Do this over dbus
        pr = os.popen("purple-remote getstatus")
        status = pr.read().strip()
        if pr.close():
            return None
        return status

    @staticmethod
    def __purpleSetStatus(status):
        os.spawnlp(os.P_WAIT, "purple-remote", "purple-remote",
                   "setstatus?status=" + status)

if __name__ == "__main__":
    main()
