#!/usr/bin/python

import os, sys
import getopt
from socket import gethostname
from pipes import quote

# Each entry in MAP is a dictionary mapping from host names (as
# returned by hostname) to equivalent directories.
#
# XXX This should be a config file
#
# XXX Perhaps these should match hostname -f.  Then I could use this
# same map for ssh-dwim, since ssh-dwim needs to *use* the hostname,
# not just recognize it.  OTOH, ssh-dwim's needs are different: it
# needs to know which host is *best* for a mapping, only needs to know
# the ssh'able hostname of that host, and doesn't need to check the
# remote hostname to figure out what to cd to.  Though, if all it
# knows for a mapping is the ssh-able hostname of the best host, I can
# reuse all of the logic in ssh-cwd and can continue to use
# non-qualified hostnames within the mapping.  In fact, all it really
# needs to know is the ssh name of the host, which may not be its
# hostname at all.  ssh-dwim also needs to know when it's reasonable
# to run the command locally, which may be the case for some subset of
# the hosts (say, a common NFS mount where you can't ssh into the
# server; the ssh-cwd map still makes sense, but the ssh-dwim map is
# very different).
MAP = [{"drake":"/home/amthrax/ssh/tom",
        "tom":"/"},
       {"drake":"/home/amthrax/ssh/josmp",
        "josmp":"/"},
       ]

# The getopt specification for ssh's command line arguments.
# Unfortunately, we need to be able to parse these to reliably extract
# the target hostname and command.
SSH_ARGS = "1246ab:c:e:fgi:kl:m:no:p:qstvxACD:F:I:KL:MNO:PR:S:TVw:XYy"

def parseArgs():
    # Parse ssh arguments
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], "+" + SSH_ARGS)
    except getopt.GetoptError, err:
        if err.opt:
            # Get ssh to print its error message.  We strip all of the
            # other arguments to ensure this will be an invalid
            # command-line, even if ssh now supports some argument we
            # don't know about.
            os.execlp("ssh", "ssh", "-" + err.opt)
        else:
            # I believe there are no cases where no option is implicated
            # in the exception, but the docs say it's possible.
            raise
    if len(args) == 0:
        # Again, get ssh to print the error
        os.execlp("ssh", "ssh")
    login = args[0]
    # The ssh client simply concatenates all of the command arguments
    # it gets.
    command = " ".join(args[1:])
    return opts, login, command

def asDir(path):
    path = os.path.normpath(path)
    if not path.endswith("/"):
        path += "/"
    return path

def mapDir(localDir, localHost):
    # Filter the mapping to only those that mention localHost and
    # contain localDir and sort it so that the most specific
    # directories will match first
    mappings = sorted([m for m in MAP
                       if localHost in m
                       and localDir.startswith(m[localHost])],
                      key = lambda m: len(m[localHost]))
    # Merge these mappings to find the most specific directory
    # applicable to each possible remote host
    res = {}
    for mapping in mappings:
        localPart = mapping[localHost]
        for remoteHost, remoteDir in mapping.items():
            if remoteHost == localHost or remoteHost in res:
                continue
            res[remoteHost] = os.path.join(remoteDir,
                                           localDir[len(localPart):])
    return res

def cdCmd(targets, command):
    # Build shell code to switch to target directory
    cdPart = 'case `hostname` in '
    for h, d in targets.items():
        cdPart += '%s)cd %s;;' % (quote(h), quote(d))
    cdPart += '*)echo Cannot map directory to `hostname`>&2;exit 1;;esac'
    # Emulate ssh's handling of command
    if not len(command):
        # XXX This doesn't run things quite the same way, since I
        # don't get the motd and stuff.  It appears the ssh does this
        # itself and check_quietlogin suppresses the motd either if a
        # command was given or if .hushlogin exists.  Otherwise, it
        # runs display_loginmsg and do_motd.

        # When given no command, ssh'd do_child simply exec's the
        # user's shell as a login shell with no arguments.
        execPart = 'exec -l $0'
        # Normally, ssh defaults to allocating a TTY when given no
        # command.  Since we're now giving it a command, we have to
        # force TTY allocation.  Conveniently, if the user explicitly
        # passed -T, it'll override this extra argument (regardless of
        # order).
        extraOpts = [('-t', '')]
    else:
        # When given a command, ssh's do_child runs the command by
        # exec'ing the user's shell with -c and the command.  The
        # passed command needs to be a single argument, so we quote it
        # here.
        execPart = 'exec $SHELL -c ' + quote(command)
        extraOpts = []

    return extraOpts, cdPart + '&&' + execPart

def invoke(opts, login, command):
    # Re-construct ssh arguments
    sshargs = []
    for opt, val in opts:
        sshargs.append(opt)
        if val:
            sshargs.append(val)
    sshargs.append(login)
    # Make sure the command is treated as a command
    sshargs.append("--")
    sshargs.append(command)

    # Run ssh
    os.execlp("ssh", "ssh", *sshargs)

opts, login, command = parseArgs()
targets = mapDir(os.getcwd(), gethostname())
extraOpts, realCommand = cdCmd(targets, command)
invoke(opts + extraOpts, login, realCommand)
