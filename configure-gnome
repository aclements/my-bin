#!/usr/bin/python3

# Use gettings-diff to see what settings differ from defaults

import argparse
import os.path
from typing import NamedTuple

import dbus
import gi
gi.require_version("Gdk", "4.0")
gi.require_version("Gtk", "4.0")
from gi.repository import Gio, GLib, Gdk, Gtk

mode = "check"
wm = None
def main():
    cats = [
        set_view,
        set_input,
        set_keys,
        set_paperwm,
        set_notifications,
    ]

    parser = argparse.ArgumentParser()
    action = parser.add_mutually_exclusive_group()
    action.add_argument("--check", action="store_const", dest="mode", const="check")
    action.add_argument("--apply", action="store_const", dest="mode", const="apply")
    action.add_argument("--list", action="store_const", dest="mode", const="list")
    parser.add_argument("--wm", choices=["paperwm", "gnome"])
    cat_names = ["all"] + [cat.__name__[4:] for cat in cats]
    parser.add_argument("categories", nargs="*", choices=cat_names)
    args = parser.parse_args()

    global mode, wm
    mode = args.mode
    wm = args.wm

    do_cats = set(args.categories)
    if "all" in do_cats or len(do_cats) == 0:
        do_cats = set(cat_names[1:])
    for cat in cats:
        if cat.__name__[4:] in do_cats:
            cat()

def logDo(fmt):
    if mode == "apply":
        print(fmt)
        return True
    else:
        print(f"{fmt} (dry run)")
        return False

def get_settings(schemaID, path=None, extension=None):
    # Useful example: https://docs.gtk.org/gio/struct.SettingsSchema.html?q=
    if extension is not None:
        # Combine home directory
        dir = os.path.join(os.path.expanduser("~"), ".local/share/gnome-shell/extensions", extension, "schemas")
        sss = Gio.SettingsSchemaSource.new_from_directory(dir, None, True)
    else:
        # In this case we could just use Gio.Settings.new, but we do this more
        # explicit approach to unify the path more with extensions.
        sss = Gio.SettingsSchemaSource.get_default()

    schema = sss.lookup(schemaID, True)
    return Gio.Settings.new_full(schema, None, path)

def get(schemaID, key, path=None, extension=None):
    s = get_settings(schemaID, path, extension)
    return s.get_value(key)

def gset(schemaID, *args, path=None, extension=None):
    if len(args) % 2 != 0:
        raise ValueError("expected an even number of arguments")

    s = get_settings(schemaID, path, extension)
    for i in range(0, len(args), 2):
        k, v = args[i], args[i + 1]
        if v is None:
            # Reset to default
            gv = s.get_default_value(k)
        else:
            gv = python_to_gvariant(v)
        have = s.get_value(k)
        if have != gv or mode == "list":
            print(f"{schemaID}{':'+path if path else ''} {k}")
            print(f"  Default: {s.get_default_value(k)}")
            print(f"  Current: {have}")
            print(f"  New:     {gv}")
        if mode == "apply":
            if have != gv:
                if v is None:
                    s.reset(k)
                else:
                    s.set_value(k, gv)

def python_to_gvariant(value):
    """Converts a Python value to a GVariant."""
    if isinstance(value, str):
        return GLib.Variant.new_string(value)
    elif isinstance(value, bool):
        return GLib.Variant.new_boolean(value)
    elif isinstance(value, int):
        return GLib.Variant.new_int32(value)  # "i" code
    elif isinstance(value, list):
        if all(isinstance(item, str) for item in value):
            return GLib.Variant("as", value)
        elif all(isinstance(item, int) for item in value):
            return GLib.Variant("ai", value)
        else:
            raise TypeError("Unsupported list element type")
    elif isinstance(value, dict):
        gvariant_dict_entries = {}
        for key, val in value.items():
            if not isinstance(key, str):
                raise TypeError("Dictionary keys must be strings")
            gvariant_dict_entries[key] = python_to_gvariant(val)
        # I'm not sure what happens if something is expecting a more specific
        # type, like "a{si}".
        return GLib.Variant("a{sv}", gvariant_dict_entries)
    elif isinstance(value, GLib.Variant):
        return value
    else:
        raise TypeError(f"Unsupported type: {type(value)}")

def install_extension(id):
    bus = dbus.SessionBus()
    proxy = bus.get_object("org.gnome.Shell.Extensions", "/org/gnome/Shell/Extensions")
    manager = dbus.Interface(proxy, "org.gnome.Shell.Extensions")

    # installed_extensions is a dict keyed by extension ID.
    installed_extensions = manager.ListExtensions()
    if id in installed_extensions:
        info = installed_extensions[id]
        if info["enabled"]:
            print(f"Extension {id} already installed and enabled")
            return True
        print(f"Extension {id} already installed")
    else:
        if not logDo(f"Installing {id}"):
            # Can't dry-run enabling without installing
            return False
        manager.InstallRemoteExtension(id)
        info = manager.GetExtensionInfo(id)
        # I think installing automatically enables, but if not, we'll fall
        # through to enabling.
        if info["enabled"]:
            return True

    if not logDo(f"Enabling {id}"):
        return False
    manager.EnableExtension(id)

    return True

class Accel(NamedTuple):
    key: int
    mods: Gdk.ModifierType

    @classmethod
    def parse(cls, str):
        ok, key, mods = Gtk.accelerator_parse(str)
        if not ok:
            raise ValueError(f"Invalid accelerator: {str}" )
        return cls(key=key, mods=mods)

    def __str__(self) -> str:
        return Gtk.accelerator_name(self.key, self.mods)

def set_view():
    # Dark mode
    gset("org.gnome.desktop.interface", "color-scheme", "prefer-dark")

    # Switch workspaces on all displays
    gset("org.gnome.mutter", "workspaces-only-on-primary", False)

    # Default monospace font
    gset("org.gnome.desktop.interface", "monospace-font-name", "Source Code Pro 9")

def set_input():
    # Tap to click
    gset("org.gnome.desktop.peripherals.touchpad", "tap-to-click", True)

    if wm == "gnome":
        # Focus follows mouse
        gset("org.gnome.desktop.wm.preferences", "focus-mode", "sloppy")
    elif wm == "paperwm":
        # Click to focus because PaperWM interacts poorly with sloppy focus
        gset("org.gnome.desktop.wm.preferences", "focus-mode", "click")

def set_keys():
    # Workspace key bindings
    # https://unix.stackexchange.com/questions/677878/supernumber-key-combos-remapping-in-gnome-40-switch-workspaces-instead-of-laun
    for i in range(1, 10):
        # Clear default "switch to application" bindings
        gset("org.gnome.shell.keybindings", f"switch-to-application-{i}", [])
        # Set switch to workspace and move to workspace
        gset("org.gnome.desktop.wm.keybindings",
             f"switch-to-workspace-{i}", [f'<Super>{i}'],
             f"move-to-workspace-{i}", [f'<Super><Shift>{i}'])

    # WM=specific key bindings
    def gsetWM(schema, key, gnome=None, paperwm=None):
        if wm == "gnome":
            gset(schema, key, gnome)
        elif wm == "paperwm":
            gset(schema, key, paperwm)
    # Disable maximize-vertically, which doesn't make much sense in PaperWM.
    gsetWM("org.gnome.desktop.wm.keybindings",
           "maximize-vertically", gnome='<Super>space', paperwm=[])
    # Conflicts with <Super>up/down
    gsetWM("org.gnome.desktop.wm.keybindings",
           "maximize", paperwm=[])
    gsetWM("org.gnome.desktop.wm.keybindings",
           "unmaximize", paperwm=[])
    # Conflicts with <Super>h
    gsetWM("org.gnome.desktop.wm.keybindings",
           "minimize", paperwm=[])
    # Conflitcs with <Shift><Super>(arrow)
    for dir in ["up", "down", "left", "right"]:
        gsetWM("org.gnome.desktop.wm.keybindings",
               f"move-to-monitor-{dir}", paperwm=[])
    # Conflicts with <Super>l
    gsetWM("org.gnome.settings-daemon.plugins.media-keys",
           "screensaver", paperwm=["<Super>q"])
    # Conflicts with <Super>Left, <Super>Right
    gsetWM("org.gnome.mutter.keybindings",
           "toggle-tiled-left", paperwm=[])
    gsetWM("org.gnome.mutter.keybindings",
           "toggle-tiled-right", paperwm=[])

    # Custom keybindings. Note that this will clobber any existing custom
    # bindings. It's annoying to just add or check for one.
    gset("org.gnome.settings-daemon.plugins.media-keys",
         "custom-keybindings", ['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/'])
    gset("org.gnome.settings-daemon.plugins.media-keys.custom-keybinding",
         "name", "Terminal",
         "command", "gnome-terminal",
         "binding", "<Super>Return",
         path="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/")

def set_paperwm():
    if wm != "paperwm":
        print("Skipping paperwm setup because of --wm setting")
        return

    id = "paperwm@paperwm.github.com"
    if not install_extension(id):
        # Dry run didn't install, so we can't do much
        print("Skipping paperwm setup")
        return

    # Basic settings
    gset("org.gnome.shell.extensions.paperwm",
         "disable-topbar-styling", True,
         "show-window-position-bar", False,
         # The default top- and bottom-of-screen margin is really big.
         # Make just enough room to see the 10px border.
         "vertical-margin", 12,
         "vertical-margin-bottom", 12,
         extension=id)

    # Key bindings
    def addKeyBinding(name, kb):
        kbs = get("org.gnome.shell.extensions.paperwm.keybindings",
                  name, extension=id).get_strv()
        kb = Accel.parse(kb)
        if kb not in map(Accel.parse, kbs):
            kbs.append(str(kb))
        gset("org.gnome.shell.extensions.paperwm.keybindings", name, kbs, extension=id)
    def rmKeyBinding(name, kb):
        kbs = get("org.gnome.shell.extensions.paperwm.keybindings",
                name, extension=id).get_strv()
        kb = Accel.parse(kb)
        kbs = [kb1 for kb1 in kbs if Accel.parse(kb1) != kb]
        gset("org.gnome.shell.extensions.paperwm.keybindings", name, kbs, extension=id)
    for dir, key in [("down", "j" ), ("left", "h" ), ("right", "l" ), ("up", "k")]:
        addKeyBinding(f"switch-{dir}", f"<Super>{key}")
        addKeyBinding(f"move-{dir}", f"<Shift><Super>{key}")
    rmKeyBinding("new-window", "<Super>Return") # Conflicts with Terminal keybinding

def set_notifications():
    # Make notifications appear in the bottom right and slide up from
    # the bottom.
    id = "notification-banner-reloaded@marcinjakubowski.github.com"
    if not install_extension(id):
        print("Skipping setup of notifications")
        return
    gset("org.gnome.shell.extensions.notification-banner-reloaded",
         "anchor-horizontal", 1,
         "anchor-vertical", 1,
         "animation-direction", 3,
         extension=id)

main()
