#!/usr/bin/python

import sys, os, ConfigParser, time, signal, subprocess, httplib, urllib

def decode_exit(code):
    signame = None
    if code < 0:
        # Figure out signal name
        for name, num in signal.__dict__.iteritems():
            if name.startswith('SIG') and not name.startswith('SIG_') and \
               num == -code:
                signame = name
                break

    if code == 0:
        return 'Success'
    elif signame:
        return 'Terminated by %s' % signame
    else:
        return 'Exited with code %d' % code

def send(message):
    conn = httplib.HTTPSConnection('api.pushover.net:443')
    conn.request('POST', '/1/messages.json',
                 urllib.urlencode(message),
                 {'Content-type': 'application/x-www-form-urlencoded'})
    res = conn.getresponse()
    if res.status != 200:
        print >>sys.stderr, 'Sending notification failed:'
        print >>sys.stderr, res.read()

config = ConfigParser.RawConfigParser()
config.read(os.path.expanduser('~/.ponotrc'))

message = {}
message['token'] = config.get('tokens', 'api')
message['user'] = config.get('tokens', 'user')
try:
    minsecs = config.getint('config', 'minsecs')
except (ConfigParser.NoSectionError, ConfigParser.NoOptionError):
    minsecs = 0

if len(sys.argv) == 1:
    message['title'] = 'Command completed'
    message['message'] = 'Unknown status'
    code = 0
    send(message)
elif len(sys.argv) > 1:
    start = time.time()
    p = subprocess.Popen(sys.argv[1:])
    code = p.wait()

    if time.time() - start >= minsecs:
        message['title'] = ('Command ' + ' '.join(sys.argv[1:]))[:128]
        message['message'] = decode_exit(code)
        send(message)
    else:
        print >>sys.stderr, '%s: Fast command; no notification sent' % \
            os.path.basename(sys.argv[0])

if code < 0:
    signal.signal(-code, signal.SIG_DFL)
    os.kill(os.getpid(), -code)
sys.exit(code)
