#!/usr/bin/python

import os, sys, socket
import socket
import getpass

SOCKNAME = "/tmp/rbackupd-sock"

class Command(object):
    nArgs = 0

    def __init__(self, args):
        self.__sock = socket.socket(socket.AF_UNIX)
        self.__sock.connect(SOCKNAME)
        self.handle(*args)

    def send(self, cmd, *args):
        sock = self.__sock
        sock.send(cmd+"\n")
        for arg in args:
            if "\n" in arg:
                raise ValueError, "Argument contains newline"
            sock.send(arg+"\n")
        sock.send("\n")

    def finish(self):
        sock = self.__sock
        while True:
            ch = sock.recv(1)
            if len(ch):
                sys.stderr.write(ch)
            else:
                break
        sock.shutdown(socket.SHUT_RDWR)
        sock.close()

    def waitFor(self, eline):
        sock = self.__sock
        while True:
            try:
                line = self.getLine()
            except EOFError:
                raise EOFError, "EOF waiting for %s" % `eline`
            if line == eline:
                break
            else:
                print >> sys.stderr, line

    def getLine(self):
        sock = self.__sock
        buf = ""
        while True:
            ch = sock.recv(1)
            if ch == "\n":
                return buf
            elif len(ch):
                buf += ch
            else:
                raise EOFError, "EOF waiting for end of line"

    def sendAndFinish(self, cmd, *args):
        self.send(cmd, *args)
        self.finish()

    def handle(self):
        raise NotImplementedError

class CmdPassword(Command):
    def handle(self):
        self.sendAndFinish("password", getpass.getpass("LUKS Password: "))

class CmdMount(Command):
    def handle(self):
        self.sendAndFinish("mount")

class CmdUmount(Command):
    def handle(self):
        self.sendAndFinish("umount")

class CmdRDServe(Command):
    def handle(self):
        self.send("backupMount")
        self.waitFor("=== Ready ===")
        dest = self.getLine()
        # dest = "/media/backup"

        print >> sys.stderr, "Starting rdiff-backup"
        res = os.spawnlp(os.P_WAIT, "rdiff-backup",
                         "rdiff-backup", "--server",
                         "--restrict", dest)
        print >> sys.stderr
        if res != 0:
            print >> sys.stderr, \
                "rdiff-backup FAILED with error %d" % res
        else:
            print >> sys.stderr, "rdiff-backup completed successfully"
        print >> sys.stderr

        self.sendAndFinish("continue")

commands = {"password" : CmdPassword,
            "mount" : CmdMount,
            "umount" : CmdUmount,
            "rdserve" : CmdRDServe}

def main():
    if os.environ.get("SSH_ORIGINAL_COMMAND") == "./rbackupc ping":
        # This is used for testing the restricted ssh configuration
        return
    if len(sys.argv) <= 1:
        print >> sys.stderr, "Usage: %s <command> <args>" % sys.argv[0]
        return
    cmd = sys.argv[1]
    if cmd not in commands:
        print >> sys.stderr, "Unknown command %s" % `cmd`
        return
    args = sys.argv[2:]
    expect = commands[cmd].nArgs
    if len(args) != expect:
        print >> sys.stderr, \
            "Expected %d arguments, got %d" % (expect, len(args))
        return
    commands[cmd](args)

if __name__ == "__main__":
    main()
