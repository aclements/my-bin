#!/usr/bin/python

from __future__ import with_statement

import os, sys, threading, traceback, glob, time, re, sha
from SocketServer import ThreadingUnixStreamServer, StreamRequestHandler

from rbackup import Protocol, ProtocolError, SOCKNAME

##################################################################
# User-editable configuration
#

# The directory on which to mount the backup partition
DEST = "/media/backup"
# The UUID of the partition to mount
UUID = "17028002-0db7-46f7-ae8e-ac4110622a6c"
# The name of the crypto-mapping to use
MAPPING = "backup"
# Either None, or the double SHA-1 of the LUKS password.  This is used
# for checking the password command, because otherwise it can't
# recognize an incorrect password until mount time.
LUKSSHA = "f0c023f98c37577ce756211bdae24bac049985fb"

# This daemon requires the following sudo configuration:
# rbackup ALL=(root) NOPASSWD: \
#         /bin/mount /dev/mapper/backup /media/backup, \
#         /bin/umount /media/backup, \
#         /sbin/cryptsetup status backup, \
#         /sbin/cryptsetup --key-file - luksOpen /dev/sd[a-z][1-9] backup, \
#         /sbin/cryptsetup luksClose backup




##################################################################
# Utilities
#

class BackupError(RuntimeError):
    pass

class CommandError(RuntimeError):
    def __init__(self, msg, status):
        RuntimeError.__init__(self, msg)
        self.status = status

def execute(cmd, *args, **kwargs):
    def executeKW(sendStr = None, readStdout = False):
        return sendStr, readStdout
    sendStr, readStdout = executeKW(**kwargs)

    if sendStr:
        fromMe, toIt = os.pipe()
    else:
        fromMe, toIt = None, None

    outFromIt, outToMe = os.pipe()
    if not readStdout:
        sys.stdout.pullFrom(os.fdopen(outFromIt,"r"))

    errFromIt, errToMe = os.pipe()
    sys.stderr.pullFrom(os.fdopen(errFromIt,"r"))

    printable = cmd
    for a in args:
        a = a.replace('\\', '\\\\').replace('"', '\\"').replace('$', '\\$')
        if ' ' in a:
            a = '"' + a + '"'
        else:
            for c in "~!*()[|;<>?":
                a = a.replace(c,'\\'+c)
        printable += " " + a
    print "$ %s" % printable

    child = os.fork()
    if child == 0:
        # Setup stdin
        if fromMe:
            os.dup2(fromMe, 0)
            os.close(toIt)
        else:
            os.close(0)
        # Setup stdout
        os.dup2(outToMe, 1)
        os.close(outFromIt)
        # Setup stderr
        os.dup2(errToMe, 2)
        os.close(errFromIt)
        # Exec
        os.execlp(cmd, cmd, *args)

    if toIt:
        os.close(fromMe)
        del fromMe
        os.fdopen(toIt, "w").write(sendStr)

    os.close(outToMe)
    del outToMe
    os.close(errToMe)
    del errToMe

    if readStdout:
        result = os.fdopen(outFromIt, "r").read()
    else:
        result = None

    (pid, res) = os.waitpid(child, 0)
    if not os.WIFEXITED(res) or os.WEXITSTATUS(res) != 0:
        status = 1
        if os.WIFEXITED(res):
            desc = "Exit code %d" % os.WEXITSTATUS(res)
            status = os.WEXITSTATUS(res)
        elif os.WIFSIGNALLED(res):
            desc = "Signal %d" % os.WTERMSIG(res)
        elif os.WIFSTOPPED(res):
            desc = "Stopped by %d" % os.WSTOPSIG(res)
        else:
            desc = "Unknown code %d" % res
        msg = "Command %s failed: %s" % (printable, desc)
        raise CommandError(msg, status)
    return result

##################################################################
# Information retrieval
#

def getMounts():
    fp = file("/proc/mounts")
    mounts = {}
    for line in fp:
        parts = line.split()
        if len(parts) != 6:
            fp.close()
            raise ValueError, "Unparsable line in /proc/mounts: %s" % `line`
        mounts[parts[1]] = parts[0]
    fp.close()
    return mounts

def findDevice(uuid):
    assert ".." not in uuid
    return os.path.realpath("/dev/disk/by-uuid/" + uuid)

def getLUKSInfo(mapID):
    """Returns a dictionary of LUKS information for the given LUKS ID, or
    None if the mapping does not exist.  The dictionary will contain
    values for mapDev, cipher, keysize, device, offset, size, and
    mode."""
    
    mapDev = "/dev/mapper/%s" % mapID
    if not os.path.exists(mapDev):
        return None

    info = execute("sudo", "cryptsetup", "status", mapID,
                   readStdout = True)
    lines = info.split("\n")
    fl = lines[0].split(" ")
    if len(fl) != 3 or fl[1] != "is" or fl[2] != "active:":
        raise ValueError, "Unparsable first line in 'cryptsetup status %s': %s" \
            % (mapID, `lines[0]`)
    lines = lines[1:]
    info = {}
    info["mapDev"] = fl[0]
    for l in lines:
        if not len(l):
            continue
        parts = l.split(": ")
        if len(parts) != 2:
            raise ValueError, "Unparsable line in 'cryptsetup status %s': %s" \
                  % (mapID, `l`)
        info[parts[0].strip()] = parts[1].strip()
    return info

##################################################################
# Low-level mounting and mapping operations
#

luksPassword = None

def mapDevice(blockDev, mapID):
    """Constructs a decrypted mapping of blockDev to mapID.  Returns the
    full device name of the mapping."""

    if luksPassword == None:
        raise BackupError, "Backup partition password not set"

    mapDev = "/dev/mapper/%s" % mapID

    # For safety, check if this device is already mapped (since
    # cryptsetup 1.0.6, this is only for usability, since it now locks
    # the device)
    luksInfo = getLUKSInfo(mapID)
    if luksInfo:
        device = luksInfo.get("device")
        if not device:
            raise ValueError, "Unable to find 'device' field in LUKS info"
        if device == blockDev:
            # In this case, the mapping already exists, and
            # the underlying hardware device is still present
            raise BackupError, \
                "%s is already mapped to %s" % (blockDev, mapDev)
        else:
            raise BackupError, "%s is mapped to %s" % (device, mapDev)

    print "Mapping %s to %s with decryption" % (blockDev, mapDev)
    try:
        execute("sudo", "cryptsetup", "--key-file", "-",
                "luksOpen", blockDev, mapID,
                sendStr = luksPassword)
    except:
        print "Mapping failed"
        if getLUKSInfo(mapID):
            print "Mapping found.  Unmapping"
            execute("sudo", "cryptsetup", "luksClose", mapID)
        raise
    return mapDev

def unmapDevice(mapID):
    """Destroys the mapping with LUKS ID mapID."""

    luksInfo = getLUKSInfo(mapID)

    if not luksInfo:
        raise ValueError, \
            "Cannot unmap LUKS device %s because it does not exist." % mapID
    mapDev = luksInfo["mapDev"]

    print "Umapping %s" % mapDev
    execute("sudo", "cryptsetup", "luksClose", mapID)

def mountDevice(device, dest):
    """Mounts device on dest.  If an exception is raised, it is guaranteed
    that this will have had no ultimate effect."""

    mounts = getMounts()
    if dest in mounts:
        if mounts[dest] == device:
            raise BackupError, \
                "%s is already mounted on %s" % (device, dest)
        else:
            raise BackupError, \
                "%s is mounted on %s" % (mounts[dest], dest)

    print "Mounting %s on %s" % (device, dest)
    try:
        execute("sudo", "mount", device, dest)
    except:
        print "Mounting failed"
        if dest in getMounts():
            print "Mount found; umounting."
            execute("sudo", "umount", DEST)
        raise

def unmountDevice(dest):
    """Unmount the directory dest."""

    if dest not in getMounts():
        raise ValueError, \
            "Cannot unmount %s because it is not mounted." % dest

    print "Unmounting %s" % dest
    execute("sudo", "umount", dest)

##################################################################
# High-level operations
#

mountCount = 0
mountLock = threading.RLock()

def mount():
    global mountCount
    with mountLock:
        if mountCount == 0:
            blockDev = findDevice(UUID)
            mapDev = mapDevice(blockDev, MAPPING)
            try:
                mountDevice(mapDev, DEST)
            except:
                unmapDevice(MAPPING)
                raise
        else:
            print "Not mounting; already mounted"
        mountCount += 1

def umount():
    global mountCount
    with mountLock:
        if mountCount == 1:
            unmountDevice(DEST)
            unmapDevice(MAPPING)
        elif mountCount > 0:
            print "Not unmounting; still in use by %d client(s)" % \
                (mountCount-1)
        else:
            print "Not unmounting; not mounted by any clients"
        if mountCount > 0:
            mountCount -= 1

##################################################################
# Commands
#

serverLog = sys.__stdout__

class Command(object):
    nArgs = 0

    def __init__(self, proto, cmd, *args):
        if len(args) != self.nArgs:
            print >> sys.stderr, \
                "Expected %d arguments, got %d" % (self.nArgs, len(args))
            os.exit(1)
        self.proto = proto
        self.log(cmd, args)
        self.handle(*args)

    def log(self, cmd, args):
        print >> serverLog, "Handling command %s %s" % (cmd, args)

    def handle(self):
        raise NotImplementedError

class CmdPassword(Command):
    nArgs = 1

    def log(self, cmd, args):
        print >> serverLog, "Handling command %s ***" % cmd

    def handle(self, password):
        global luksPassword
        if (LUKSSHA and
            sha.new(sha.new(password).hexdigest()).hexdigest() != LUKSSHA):
            raise BackupError, "Incorrect password"
        luksPassword = password

class CmdMount(Command):
    nArgs = 0

    def handle(self):
        mount()

class CmdUmount(Command):
    nArgs = 0

    def handle(self):
        umount()

class CmdForceUmount(Command):
    nArgs = 0

    def handle(self):
        global mountCount
        with mountLock:
            mountCount = 1
            umount()

class CmdMountAndUnmount(Command):
    nArgs = 0

    def handle(self):
        mount()
        try:
            self.proto.send("mounted", DEST)
            self.proto.recv("continue")
        finally:
            umount()

commands = {"password" : CmdPassword,
            "mount" : CmdMount,
            "umount" : CmdUmount,
            "forceumount" : CmdForceUmount,
            "mountAndUnmount" : CmdMountAndUnmount
            }

##################################################################
# Server
#

class ThreadLocalLogger(object):
    localProto = threading.local()

    def __init__(self, original, cmd):
        self.__original = original
        self.__cmd = cmd

    def setOutput(self, target):
        self.localProto.p = target

    def __getOutput(self):
        return getattr(self.localProto, "p", None)

    def resetOutput(self):
        self.localProto.p = None

    def pullFrom(self, f):
        def puller(p):
            self.localProto.p = p
            while True:
                # XXX Stupidly inefficient
                ch = f.read(1)
                if len(ch) == 0:
                    return
                else:
                    self.write(ch)
        threading.Thread(target=puller,args=(self.__getOutput(),)).start()

    def write(self, value):
        self.__original.write(value)
        p = self.__getOutput()
        if p != None:
            try:
                p.send(self.__cmd, value)
            except:
                print >> sys.__stderr__, "Error writing to thread-local logger"
                traceback.print_exc(None, sys.__stderr__)
                print >> sys.__stderr__, "Resetting thread-local logger"
                self.resetOutput()

class RequestHandler(StreamRequestHandler):
    def setup(self):
        StreamRequestHandler.setup(self)
        print "Incoming connection"

    def handle(self):
        p = Protocol(sock = self.request)
        sys.stdout.setOutput(p)
        sys.stderr.setOutput(p)
        try:
            msg = p.recv()
            if msg == None:
                raise ProtocolError, "Connection closed without command"
            if len(msg) == 0:
                raise ProtocolError, "Empty message"
            if msg[0] not in commands:
                raise ProtocolError, "Unknown command %s" % `msg[0]`
            cmd = commands[msg[0]]
            cmd(p, *msg)
            status = 0
        except BackupError, msg:
            status = 1
            print >> sys.stderr, msg
            raise
        except CommandError, msg:
            status = msg.status
            print >> sys.stderr, msg
            raise
        except:
            status = 1
            print >> sys.stderr, "Unhandled exception in rbackupd:"
            print >> sys.stderr
            traceback.print_exc(None, sys.stderr)
            raise
        finally:
            sys.stdout.resetOutput()
            sys.stderr.resetOutput()
            try:
                p.send("end", status)
            except:
                print sys.stderr, "Failed to send 'end' response"
                raise

    def finish(self):
        print "Disconnected"
        StreamRequestHandler.finish(self)

def startServer():
    s = ThreadingUnixStreamServer(SOCKNAME, RequestHandler)
    sys.stdout = ThreadLocalLogger(sys.stdout, "out")
    sys.stderr = ThreadLocalLogger(sys.stderr, "err")
    print "Serving on %s" % SOCKNAME
    s.serve_forever()

if __name__ == "__main__":
    try:
        startServer()
    except:
        if os.path.exists(SOCKNAME):
            print "Freeing socket %s" % SOCKNAME
            os.unlink(SOCKNAME)
        raise
