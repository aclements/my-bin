#!/usr/bin/python

import os, sys
import getpass

from rbackup import Protocol, ProtocolError

class Command(Protocol):
    nArgs = 0

    def __init__(self, cmd, *args):
        if len(args) != self.nArgs:
            print >> sys.stderr, \
                "Expected %d arguments, got %d" % (self.nArgs, len(args))
            os.exit(1)
        Protocol.__init__(self)
        self.__status = None
        self.handle(*args)

    def setStatus(self, status):
        self.__status = status

    def handle(self):
        raise NotImplementedError

    def cmd_out(self, text):
        sys.stdout.write(text)
        sys.stdout.flush()

    def cmd_err(self, text):
        sys.stderr.write(text)
        sys.stderr.flush()

    def cmd_end(self, code):
        if self.__status != None:
            sys.exit(self.__status)
        else:
            sys.exit(code)

class CmdPassword(Command):
    def handle(self):
        self.send("password", getpass.getpass("LUKS Password: ")).finish()

class CmdMount(Command):
    def handle(self):
        self.send("mount").finish()

class CmdUmount(Command):
    def handle(self):
        self.send("umount").finish()

class CmdForceUmount(Command):
    def handle(self):
        self.send("forceumount").finish()

class CmdRDServe(Command):
    def handle(self):
        self.send("mountAndUnmount")
        _, dest = self.recv("mounted")

        print >> sys.stderr, "Starting rdiff-backup"
        res = os.spawnlp(os.P_WAIT, "rdiff-backup",
                         "rdiff-backup", "--server",
                         "--restrict", dest)
        print >> sys.stderr
        if res != 0:
            print >> sys.stderr, \
                "rdiff-backup FAILED with error %d" % res
            self.setStatus(res)
        else:
            print >> sys.stderr, "rdiff-backup completed successfully"

        print >> sys.stderr
        self.send("continue").finish()

    def cmd_out(self, text):
        # Any output that doesn't come from rdiff-backup must be
        # redirected to stderr so it doesn't confuse the remote
        # rdiff-backup
        self.cmd_err(text)

commands = {"password" : CmdPassword,
            "mount" : CmdMount,
            "umount" : CmdUmount,
            "forceumount" : CmdForceUmount,
            "rdserve" : CmdRDServe}

def main():
    if os.environ.get("SSH_ORIGINAL_COMMAND") == "./rbackupc ping":
        # This is used for testing the restricted ssh configuration
        return
    if len(sys.argv) <= 1:
        print >> sys.stderr, "Usage: %s <command> <args>" % sys.argv[0]
        return
    cmd = sys.argv[1]
    if cmd not in commands:
        print >> sys.stderr, "Unknown command %s" % `cmd`
        return
    args = sys.argv[1:]
    commands[cmd](*args)

if __name__ == "__main__":
    main()
