#!/usr/bin/python

import sys, os, subprocess

codes = {"default" : "0", "bold" : "1"}
for i, name in enumerate(["black", "red", "green", "yellow",
                          "blue", "magenta", "cyan", "white"]):
    codes[name] = "3%d" % i
    codes[name + "_background"] = "4%d" % i

def parseColor(spec):
    out = []
    for part in spec.split():
        if part not in codes:
            raise ValueError("Unknown color spec %r" % part)
        out.append(codes[part])
    return "\x1b[%sm" % ";".join(out)

ADD = parseColor("bold green")
REMOVE = parseColor("bold red")
HUNK = parseColor("bold magenta")
HEADER = parseColor("bold yellow")

def colorize():
    default = parseColor("default")
    while 1:
        l = sys.stdin.readline()
        if not l:
            break
        if l.startswith("+"):
            color = ADD
        elif l.startswith("-"):
            color = REMOVE
        elif l.startswith("@"):
            color = HUNK
        elif (
            # Diff
            l.startswith("diff") or
            # SVN
            l.startswith("Index: ") or l.startswith("======") or
            # git
            l.startswith("index ") or l.startswith("new file ")):
            # XXX Perhaps we should color one header per file, or
            # maybe this should even be the 'else' path
            color = HEADER
        else:
            color = None
        try:
            if color != None:
                sys.stdout.write(color)
            sys.stdout.write(l)
            if color != None:
                sys.stdout.write(default)
            sys.stdout.flush()
        except IOError:
            # less must have gone away
            sys.exit(1)
    try:
        sys.stdout.flush()
    except IOError:
        sys.exit(1)

def usage():
    print >> sys.stderr, "Usage: %s [diff args]" % sys.argv[0]
    print >> sys.stderr
    print >> sys.stderr, "Colorized diff.  Can be called like diff, or used as a filter."
    sys.exit(2)

if len(sys.argv) > 1:
    pin = subprocess.Popen(["diff", "-u"] + sys.argv[1:], stdout = subprocess.PIPE)
    sys.stdin = pin.stdout
else:
    pin = None

if os.isatty(1):
    if pin == None and os.isatty(0):
        # We'll fight with less over stdin.  Not a good idea.
        # However, this is the path we'll take when invoked with no
        # arguments from the command line, so it's a perfect place for
        # usage info.
        usage()

    # The -X is important in conjunction with -F on terminals where
    # 'te' clears the screen.
    pout = subprocess.Popen(["less", "-FXR"], stdin = subprocess.PIPE)
    sys.stdout = pout.stdin
else:
    pout = None

colorize()

# Clean up diff process
if pin == None:
    status = 0
else:
    status = pin.wait()
    # diff can return 2 "trouble" even for mundane things like files
    # only being in one of two directories, so we can't get much from
    # its exit code.  If something went really wrong, the message from
    # diff was probably short, so less will exit right away anyway.
    if status < 0:
        if pout != None:
            pout.terminate()
        os.kill(os.getpid(), -status)

# Wait for less process to finish (else we'll trash the terminal)
if pout != None:
    pout.stdin.close()
    pout.wait()

sys.exit(status)
