#!/bin/zsh

# TODO: This sort of conflates two things now: 1) creating an
# independent snapshot of the work tree to run a command in and 2)
# running a command remotely. Thing 1 is useful even if not remote,
# and thing 2 often doesn't require a fully independent snapshot. I
# feel like there should be a cleaner separation of concerns here.

host=work
last=
#dir=/tmp
dir=/usr/local/google/tmp

set -e

while [[ $1 = -* ]]; do
    case $1 in
        -h)
            host=$2
            shift 2
            ;;
        -last)
            # Sync and run command in the same directory as the last gor
            last=1
            shift 1
            ;;
        *)
            echo "unknown option $1" 1>&2
            exit 2
            ;;
    esac
done

# Get environment into an array.
envs=(${(0)"$(env -0)"})
# Keep only GO* environment variables.
envs=(${(M)envs:#GO*})
# But remove GOPATH and GOROOT.
envs=(${${envs:#GOPATH=*}:#GOROOT=*})
if [[ ${#envs} > 0 ]]; then
    echo "env ${envs}"
    echo
fi

top=$(git rev-parse --show-toplevel)
sub=$(git rev-parse --show-prefix)
now=$(date '+%Y-%m-%d-%H-%M-%S')

target=$dir/gor-$now
if [[ -n $last ]]; then
    target=$dir/gor-latest
fi
echo "##### Syncing to $host:$target"
# This complains if copy-dest doesn't exist, but still works.
rsync -raz --info=stats,progress2 --copy-dest=$dir/gor-latest --exclude /.git --exclude /pkg --exclude /bin --exclude /austin $top/ $host:$target
echo

# Link the latest gor directory to a known name to use as a template
# for the next rsync.
#
# Clean up gor syncs more than a day old and run the command.
#
# For cleaning up, we use the ctime because rsync syncs the mtime, so
# it might be old even for the directory we just synced.
#
# The slightly ridiculous ${(q)*[@]} below means to shell quote each
# element of $* so we correctly pass spaces through the ssh. We do the
# same for envs.
#
# We pass -t to ssh to discourage output buffering.
ssh -t $host "\
if [[ $target != $dir/gor-latest ]]; then \
  ln -sfT $target $dir/gor-latest && \
  echo devel remote/$now > $target/VERSION; \
fi && \
find $dir/gor-* -maxdepth 0 -type d -ctime +1 -exec rm -rf '{}' ';' && \
cd $target/$sub && \
env ${(q)envs[@]} ${(q)*[@]}" |& \
    awk -v x=$dir/gor-$now/ -v y=$top/ -W interactive "{gsub(x, y); print}"
exit ${pipestatus[1]}
